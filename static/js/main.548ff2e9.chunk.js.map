{"version":3,"sources":["model/Presence.js","api/config.js","api/PresenceApi.js","components/SelectFilter/index.jsx","components/CheckboxAgroup/index.jsx","components/ListPresence/index.jsx","components/MeetingRoom/index.jsx","components/App/index.jsx","serviceWorker.js","index.js"],"names":["Presence","_ref","_id","presence","entryTime","exitTime","Object","classCallCheck","this","Date","path","get","asyncToGenerator","regenerator_default","a","mark","_callee","query","_ref2","data","wrap","_context","prev","next","axios","concat","sent","abrupt","objectSpread","result","map","item","t0","Error","stop","_x","apply","arguments","SelectFilter","react_default","createElement","FormControl","componentClass","placeholder","onChange","props","onSelect","value","React","Component","CheckboxAgroup","Checkbox","onCheck","ListPresence","presences","Table","striped","bordered","hover","responsive","renderPresences","key","toString","toLocaleString","MeetingRoom","_this","possibleConstructorReturn","getPrototypeOf","call","state","presencesFiltered","filtered","grouped","onSelectFilter","bind","assertThisInitialized","onAgroup","getPresences","filter","setInterval","_this2","Panel","bsStyle","Heading","Title","Body","Form","horizontal","FormGroup","controlId","Col","sm","md","components_SelectFilter","components_CheckboxAgroup","components_ListPresence","event","target","agrouped","checked","setState","console","log","_context2","reduce","acc","cur","length","push","App","components_MeetingRoom","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAceA,EAbX,SAAAA,EAAAC,GAKG,IAJCC,EAIDD,EAJCC,IACAC,EAGDF,EAHCE,SACAC,EAEDH,EAFCG,UACAC,EACDJ,EADCI,SACDC,OAAAC,EAAA,EAAAD,CAAAE,KAAAR,GACCQ,KAAKN,IAAMA,EACXM,KAAKL,SAAWA,EAChBK,KAAKJ,UAAY,IAAIK,KAAKL,GAC1BI,KAAKH,SAAW,IAAII,KAAKJ,ICV3BK,EAA0E,yCCI1EC,EAAG,eAAAV,EAAAK,OAAAM,EAAA,EAAAN,CAAAO,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIMC,IAAMb,IAAN,GAAAc,OAAaf,EAAb,eAAAe,OAA+BR,IAJrC,cAAAC,EAAAG,EAAAK,KAGAP,EAHAD,EAGAC,KAHAE,EAAAM,OAAA,SAAArB,OAAAsB,EAAA,EAAAtB,CAAA,GAMGa,EANH,CAOAU,OAAQV,EAAKU,OAAOC,IAAI,SAAAC,GAAI,OAAI,IAAI/B,EAAS+B,QAP7C,aAAAV,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAUEY,MAAM,iCAVR,yBAAAZ,EAAAa,SAAAlB,EAAAR,KAAA,YAAH,gBAAA2B,GAAA,OAAAlC,EAAAmC,MAAA5B,KAAA6B,YAAA,YCYMC,mLAXP,OACIC,EAAAzB,EAAA0B,cAACC,EAAA,EAAD,CAAaC,eAAe,SAASC,YAAY,SAASC,SAAUpC,KAAKqC,MAAMC,UAC3EP,EAAAzB,EAAA0B,cAAA,UAAQO,MAAM,OAAd,eACAR,EAAAzB,EAAA0B,cAAA,UAAQO,MAAM,QAAd,oBACAR,EAAAzB,EAAA0B,cAAA,UAAQO,MAAM,QAAd,kCANWC,IAAMC,oBCQlBC,mLANP,OACIX,EAAAzB,EAAA0B,cAACW,EAAA,EAAD,CAAUP,SAAUpC,KAAKqC,MAAMO,SAA/B,qCAHiBJ,IAAMC,oBCgCpBI,mLA/BF,IACGC,EAAc9C,KAAKqC,MAAnBS,UACR,OACIf,EAAAzB,EAAA0B,cAACe,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,GACpCpB,EAAAzB,EAAA0B,cAAA,aACID,EAAAzB,EAAA0B,cAAA,UACID,EAAAzB,EAAA0B,cAAA,kCACAD,EAAAzB,EAAA0B,cAAA,+BACAD,EAAAzB,EAAA0B,cAAA,8BAGRD,EAAAzB,EAAA0B,cAAA,aACKhC,KAAKoD,gBAAgBN,6CAMtBA,GACZ,OAAOA,EAAUxB,IAAI,SAAAC,GACjB,OACIQ,EAAAzB,EAAA0B,cAAA,MAAIqB,IAAK9B,EAAK7B,IAAI4D,YACdvB,EAAAzB,EAAA0B,cAAA,UAAKT,EAAK3B,UAAU2D,eAAe,UACnCxB,EAAAzB,EAAA0B,cAAA,UAAKT,EAAK1B,SAAS0D,eAAe,UAClCxB,EAAAzB,EAAA0B,cAAA,UAAKT,EAAK5B,SAAW,UAAY,sBAzB1B6C,IAAMC,WCyGlBe,cApGX,SAAAA,EAAYnB,GAAO,IAAAoB,EAAA,OAAA3D,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,IACfC,EAAA3D,OAAA4D,EAAA,EAAA5D,CAAAE,KAAAF,OAAA6D,EAAA,EAAA7D,CAAA0D,GAAAI,KAAA5D,KAAMqC,KAEDwB,MAAQ,CACTf,UAAW,GACXgB,kBAAmB,IAEvBL,EAAKM,SAAW,MAChBN,EAAKO,SAAU,EAEfP,EAAKQ,eAAiBR,EAAKQ,eAAeC,KAApBpE,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA2D,KACtBA,EAAKW,SAAWX,EAAKW,SAASF,KAAdpE,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA2D,KAChBA,EAAKY,aAAeZ,EAAKY,aAAaH,KAAlBpE,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA2D,KACpBA,EAAKa,OAASb,EAAKa,OAAOJ,KAAZpE,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA2D,KAbCA,sNAiBTzD,KAAKqE,sBAEXE,YAAY,kBAAMC,EAAKH,gBAAgB,yIAIvC,IAAMP,EAAoB9D,KAAK6D,MAAMC,kBACrC,OACI/B,EAAAzB,EAAA0B,cAACyC,EAAA,EAAD,CAAOC,QAAQ,WACX3C,EAAAzB,EAAA0B,cAACyC,EAAA,EAAME,QAAP,KACI5C,EAAAzB,EAAA0B,cAACyC,EAAA,EAAMG,MAAP,CAAa1C,eAAe,MAA5B,6CAEJH,EAAAzB,EAAA0B,cAACyC,EAAA,EAAMI,KAAP,KACI9C,EAAAzB,EAAA0B,cAAC8C,EAAA,EAAD,CAAMC,YAAU,GACZhD,EAAAzB,EAAA0B,cAACgD,EAAA,EAAD,CAAWC,UAAU,qBACjBlD,EAAAzB,EAAA0B,cAACkD,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACZrD,EAAAzB,EAAA0B,cAACqD,EAAD,CAAc/C,SAAUtC,KAAKiE,kBAEjClC,EAAAzB,EAAA0B,cAACkD,EAAA,EAAD,CAAKC,GAAI,GACLpD,EAAAzB,EAAA0B,cAACsD,EAAD,CAAgB1C,QAAS5C,KAAKoE,cAI1CrC,EAAAzB,EAAA0B,cAACuD,EAAD,CAAczC,UAAWgB,6CAM1B0B,GACXxF,KAAK+D,SAAWyB,EAAMC,OAAOlD,MAC7BvC,KAAKsE,0CAGAkB,GACLxF,KAAK0F,SAAWF,EAAMC,OAAOE,QAC7B3F,KAAKsE,yLAKwBnE,oBAAjBkB,WACRrB,KAAK4F,SAAS,CACV9C,UAAWzB,IAEfrB,KAAKsE,yDAELuB,QAAQC,IAARC,EAAAvE,gJAKJ,IAAMsB,EAAY9C,KAAK6D,MAAMf,UACvB4C,EAAW1F,KAAK0F,SAChBpB,EAAStE,KAAK+D,SAEhB1C,EAAS,GAETA,EADAqE,EACS5C,EAAUkD,OAAO,SAACC,EAAKC,GAC5B,OAAID,EAAIE,QAAUF,EAAIA,EAAIE,OAAS,GAAGxG,WAAauG,EAAIvG,UACnDsG,EAAIA,EAAIE,OAAQ,GAAGtG,SAAWqG,EAAIrG,SAC3BoG,IAEXA,EAAIG,KAAKF,GACFD,IACR,IAEMnD,EAGE,QAAXwB,GAMJjD,EAASA,EAAOiD,OAAO,SAAA/C,GAAI,OAAIA,EAAK5B,YAAyB,SAAX2E,KAClDtE,KAAK4F,SAAS,CACV9B,kBAAmBzC,KAPnBrB,KAAK4F,SAAS,CACV9B,kBAAmBzC,WA1FTmB,IAAMC,WCMjB4D,mLARP,OACItE,EAAAzB,EAAA0B,cAAA,WACID,EAAAzB,EAAA0B,cAACsE,EAAD,cAJE9D,IAAMC,WCSJ8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAzB,EAAA0B,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.548ff2e9.chunk.js","sourcesContent":["class Presence {\n    constructor({\n        _id,\n        presence,\n        entryTime,\n        exitTime\n    }) {\n        this._id = _id;\n        this.presence = presence;\n        this.entryTime = new Date(entryTime);\n        this.exitTime = new Date(exitTime);\n    }\n}\n\nexport default Presence;","const path = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : 'https://salty-crag-27973.herokuapp.com';\n\nexport {\n    path,\n}","import axios from 'axios';\nimport Presence from '../model/Presence';\nimport { path } from './config';\n\nconst get = async (query) => {\n    try {\n        const {\n            data\n        } = await axios.get(`${path}/presences?${query}`);\n        return {\n            ...data,\n            result: data.result.map(item => new Presence(item))\n        }\n    } catch (e) {\n        throw Error('Erro ao buscar presenças: ');\n    }\n}\n\nconst post = async (presence) => {\n    try {\n        await axios.post(`${path}/presences`);\n    } catch (e) {\n        console.log('Erro ao postar presença: ', e);\n    }\n}\n\nexport {\n    get,\n    post\n}","import React from 'react';\nimport { FormControl } from 'react-bootstrap';\n\nclass SelectFilter extends React.Component {\n    render() {\n        return (\n            <FormControl componentClass=\"select\" placeholder=\"select\" onChange={this.props.onSelect}>\n                <option value=\"all\">Exibir tudo</option>\n                <option value=\"busy\">Somente ocupados</option>\n                <option value=\"free\">Somente disponíveis</option>\n            </FormControl>\n        )\n    }\n}\n\n\nexport default SelectFilter;","import React from 'react';\nimport { Checkbox } from 'react-bootstrap';\n\nclass CheckboxAgroup extends React.Component {\n    render() {\n        return (\n            <Checkbox onChange={this.props.onCheck}>Agrupar por Situação</Checkbox>\n        )\n    }\n}\n\nexport default CheckboxAgroup;","import React from 'react';\nimport { Table } from 'react-bootstrap';\n\nclass ListPresence extends React.Component {\n    render() {\n        const { presences } = this.props;\n        return (\n            <Table striped bordered hover responsive>\n                <thead>\n                    <tr>\n                        <th>Inicio da análise</th>\n                        <th>Fim da análise</th>\n                        <th>Situação</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderPresences(presences)}\n                </tbody>\n            </Table>\n        )\n    }\n\n    renderPresences(presences) {\n        return presences.map(item => {\n            return (\n                <tr key={item._id.toString()}>\n                    <td>{item.entryTime.toLocaleString('pt-Br')}</td>\n                    <td>{item.exitTime.toLocaleString('pt-Br')}</td>\n                    <td>{item.presence ? 'Ocupado' : 'Liberado'}</td>\n                </tr>\n            );\n        });\n    }\n}\n\nexport default ListPresence;","import React from 'react';\nimport { Form, FormGroup, Panel, Col } from 'react-bootstrap';\nimport { get } from '../../api/PresenceApi';\nimport SelectFilter from '../SelectFilter';\nimport CheckboxAgroup from '../CheckboxAgroup';\nimport ListPresence from '../ListPresence';\n\nclass MeetingRoom extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            presences: [],\n            presencesFiltered: [],\n        }\n        this.filtered = 'all';\n        this.grouped = false;\n\n        this.onSelectFilter = this.onSelectFilter.bind(this);\n        this.onAgroup = this.onAgroup.bind(this);\n        this.getPresences = this.getPresences.bind(this);\n        this.filter = this.filter.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.getPresences();\n\n        setInterval(() => this.getPresences(), 15000);\n    }\n\n    render() {\n        const presencesFiltered = this.state.presencesFiltered;\n        return (\n            <Panel bsStyle=\"default\">\n                <Panel.Heading>\n                    <Panel.Title componentClass=\"h2\">Controle de acesso a Sala de Reuniões</Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n                    <Form horizontal>\n                        <FormGroup controlId=\"formControlFilter\">\n                            <Col sm={4} md={3}>\n                                <SelectFilter onSelect={this.onSelectFilter}/>\n                            </Col>\n                            <Col sm={3}>\n                                <CheckboxAgroup onCheck={this.onAgroup}/>\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                    <ListPresence presences={presencesFiltered}/>\n                </Panel.Body>\n            </Panel>\n        );\n    }\n\n    onSelectFilter(event) {\n        this.filtered = event.target.value\n        this.filter();\n    }\n\n    onAgroup(event) {\n        this.agrouped = event.target.checked;\n        this.filter();\n    }\n\n    async getPresences() {\n        try {            \n            const { result } = await get();\n            this.setState({\n                presences: result,\n            });\n            this.filter();\n        } catch (e) {\n            console.log(e);\n        }\n    }  \n    \n    filter() {\n        const presences = this.state.presences;\n        const agrouped = this.agrouped;\n        const filter = this.filtered;\n\n        let result = [];\n        if (agrouped) {\n            result = presences.reduce((acc, cur) => {\n                if (acc.length && acc[acc.length - 1].presence === cur.presence) {\n                    acc[acc.length -1].exitTime = cur.exitTime;\n                    return acc;\n                }\n                acc.push(cur);\n                return acc;\n            }, []);\n        } else {\n            result = presences;\n        }\n\n        if (filter === 'all') {\n            this.setState({\n                presencesFiltered: result\n            });\n            return;\n        }\n        result = result.filter(item => item.presence === (filter === 'busy'))\n        this.setState({\n            presencesFiltered: result\n        });\n    }\n}\n\nexport default MeetingRoom;","import React from 'react';\nimport MeetingRoom from '../MeetingRoom';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <MeetingRoom />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}