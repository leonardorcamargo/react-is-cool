{"version":3,"sources":["model/Presence.js","api/PresenceApi.js","api/config.js","components/SelectFilter/index.jsx","components/CheckboxAgroup/index.jsx","components/ListPresence/index.jsx","components/SelectPage/index.jsx","components/Pagination/index.jsx","components/MeetingRoom/index.jsx","components/App/index.jsx","serviceWorker.js","index.js"],"names":["Presence","_ref","_id","presence","entryTime","exitTime","Object","classCallCheck","this","Date","get","asyncToGenerator","regenerator_default","a","mark","_callee","query","_ref2","data","wrap","_context","prev","next","axios","concat","params","sent","abrupt","objectSpread","result","map","item","t0","Error","stop","_x","apply","arguments","SelectFilter","react_default","createElement","FormControl","componentClass","placeholder","onChange","props","onSelect","value","React","Component","CheckboxAgroup","Checkbox","onCheck","ListPresence","presences","Table","striped","bordered","hover","responsive","renderPresences","key","toString","toLocaleString","SelectPage","_this","possibleConstructorReturn","getPrototypeOf","call","createOptions","bind","assertThisInitialized","Form","className","page","pages","options","i","push","Pagination","Pager","Item","disabled","previous","onClick","onPrevious","src_components_SelectPage","onSelectPage","onNext","MeetingRoom","state","filtered","agroup","onSelectFilter","onAgroup","getPresences","nextPage","previousPage","setInterval","_this2","Panel","bsStyle","Heading","Title","Body","horizontal","FormGroup","controlId","Col","sm","md","components_SelectFilter","components_CheckboxAgroup","components_ListPresence","components_Pagination","event","target","checked","amount","setState","console","log","_context2","App","components_MeetingRoom","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae42aaa9.chunk.js","sourcesContent":["class Presence {\n    constructor({\n        _id,\n        presence,\n        entryTime,\n        exitTime\n    }) {\n        this._id = _id;\n        this.presence = presence;\n        this.entryTime = new Date(entryTime);\n        this.exitTime = new Date(exitTime);\n    }\n}\n\nexport default Presence;","import axios from 'axios';\nimport Presence from '../model/Presence';\nimport { path } from './config';\n\nconst get = async (query) => {\n    try {\n        const {\n            data\n        } = await axios.get(`${path}/presences`, {\n            params: query\n        });\n        return {\n            ...data,\n            result: data.result.map(item => new Presence(item))\n        }\n    } catch (e) {\n        throw Error('Erro ao buscar presenças: ');\n    }\n}\n\nexport {\n    get\n}","const path = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : 'https://salty-crag-27973.herokuapp.com';\n\nexport {\n    path,\n}","import React from 'react';\nimport { FormControl } from 'react-bootstrap';\n\nclass SelectFilter extends React.Component {\n    render() {\n        return (\n            <FormControl componentClass=\"select\" placeholder=\"select\" onChange={this.props.onSelect}>\n                <option value=\"all\">Exibir tudo</option>\n                <option value=\"busy\">Somente ocupados</option>\n                <option value=\"free\">Somente disponíveis</option>\n            </FormControl>\n        )\n    }\n}\n\n\nexport default SelectFilter;","import React from 'react';\nimport { Checkbox } from 'react-bootstrap';\n\nclass CheckboxAgroup extends React.Component {\n    render() {\n        return (\n            <Checkbox onChange={this.props.onCheck}>Agrupar por Situação</Checkbox>\n        )\n    }\n}\n\nexport default CheckboxAgroup;","import React from 'react';\nimport { Table } from 'react-bootstrap';\n\nclass ListPresence extends React.Component {\n    render() {\n        const { presences } = this.props;\n        return (\n            <Table striped bordered hover responsive>\n                <thead>\n                    <tr>\n                        <th>Inicio da análise</th>\n                        <th>Fim da análise</th>\n                        <th>Situação</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderPresences(presences)}\n                </tbody>\n            </Table>\n        )\n    }\n\n    renderPresences(presences) {\n        return presences.map(item => {\n            return (\n                <tr key={item._id.toString()}>\n                    <td>{item.entryTime.toLocaleString('pt-Br')}</td>\n                    <td>{item.exitTime.toLocaleString('pt-Br')}</td>\n                    <td>{item.presence ? 'Ocupado' : 'Liberado'}</td>\n                </tr>\n            );\n        });\n    }\n}\n\nexport default ListPresence;","import React from 'react';\nimport './index.css';\nimport { Form, FormControl } from 'react-bootstrap';\n\nclass SelectPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.createOptions = this.createOptions.bind(this);\n    }\n\n    render() {\n        return (\n            <Form className=\"teste\">\n                <FormControl \n                    componentClass=\"select\" \n                    placeholder=\"select\" \n                    value={this.props.page}\n                    onChange={this.props.onSelect}\n                >\n                    {this.createOptions()}\n                </FormControl>\n            </Form>\n        )\n    }\n\n    createOptions() {\n        const pages = this.props.pages;\n        const options = [];\n        for (let i = 1; i <= pages; i++) {\n            options.push(<option value={i} key={i}>{i}</option>);\n        }\n        return options;\n    }\n}\n\n\nexport default SelectPage;","import React from 'react';\nimport { Pager } from 'react-bootstrap';\nimport SelectPage from '../SelectPage';\n\nclass Pagination extends React.Component {\n    render() {\n        return (\n            <Pager>\n                <Pager.Item disabled={this.props.page <= 1} previous onClick={this.props.onPrevious}>\n                    &larr; Previous\n                </Pager.Item>\n                <SelectPage \n                    pages={this.props.pages} \n                    page={this.props.page}\n                    onSelect={this.props.onSelectPage}\n                />\n                <Pager.Item disabled={this.props.page >= this.props.pages} next onClick={this.props.onNext}>\n                    Next &rarr;\n                </Pager.Item>\n            </Pager>\n        )\n    }\n}\n\nexport default Pagination;","import React from 'react';\nimport { Form, FormGroup, Panel, Col } from 'react-bootstrap';\nimport { get } from '../../api/PresenceApi';\nimport SelectFilter from '../SelectFilter';\nimport CheckboxAgroup from '../CheckboxAgroup';\nimport ListPresence from '../ListPresence';\nimport Pagination from '../Pagination';\n\nclass MeetingRoom extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            presences: [],\n            page: 1,\n            pages: 0\n        }\n        this.filtered = 'all';\n        this.agroup = false;\n\n        this.onSelectFilter = this.onSelectFilter.bind(this);\n        this.onSelectPage = this.onSelectPage.bind(this);\n        this.onAgroup = this.onAgroup.bind(this);\n        this.getPresences = this.getPresences.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.getPresences();\n\n        setInterval(() => this.getPresences(), 15000);\n    }\n\n    render() {\n        const presences = this.state.presences;\n        return (\n            <Panel bsStyle=\"default\">\n                <Panel.Heading>\n                    <Panel.Title componentClass=\"h2\">Controle de acesso a Sala de Reuniões</Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n                    <Form horizontal>\n                        <FormGroup controlId=\"formControlFilter\">\n                            <Col sm={4} md={3}>\n                                <SelectFilter onSelect={this.onSelectFilter}/>\n                            </Col>\n                            <Col sm={3}>\n                                <CheckboxAgroup onCheck={this.onAgroup}/>\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                    <ListPresence presences={presences}/>\n                    <Pagination \n                        page={this.state.page}\n                        pages={this.state.pages}\n                        onSelectPage={this.onSelectPage}\n                        onPrevious={this.previousPage}\n                        onNext={this.nextPage}\n                    />\n                </Panel.Body>\n            </Panel>\n        );\n    }\n\n    onSelectFilter(event) {\n        this.filtered = event.target.value\n        this.getPresences();\n    }\n\n    onSelectPage(event) {\n        this.getPresences({page: event.target.value});\n    }\n\n    onAgroup(event) {\n        this.agroup = event.target.checked;\n        this.getPresences();\n    }\n\n    async getPresences(params = {}) {\n        try {            \n            const query = {\n                page: params.page || this.state.page,\n                amount: 15,\n            };\n            if (this.filtered !== 'all') \n                query.presence = this.filtered === 'busy';\n            if (this.agroup)\n                query.agroup = true;\n            const { result, page, pages } = await get(query);\n            this.setState({\n                presences: result,\n                page,\n                pages\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    nextPage() {\n        this.getPresences({page: this.state.page + 1})\n    }\n\n    previousPage() {\n        this.getPresences({page: this.state.page - 1})\n    }\n}\n\nexport default MeetingRoom;","import React from 'react';\nimport MeetingRoom from '../MeetingRoom';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <MeetingRoom />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}